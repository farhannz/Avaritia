name: Mingw cmake
on:
  push:
    branches: [ "cpm_test" ]
  pull_request:
    branches: [ "cpm_test" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_DEFAULT_TRIPLET: x64-mingw-static
  VCPKG_TARGET_TRIPLET: x64-mingw-static
  VCPKG_DEFAULT_HOST_TRIPLET: x64-mingw-static

defaults:
      run:
        shell: bash

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@main
      id: runvcpkg
      with:
        # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
        # The vcpkg.json file, which will be part of cache key computation.
        vcpkgJsonGlob: '${GITHUB_WORKSPACE}/vcpkg.json'
    
    - name: Configure Library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${GITHUB_WORKSPACE} -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake -GNinja

    - name: Build Library
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}
      
    - name: Configure Standalone GUI Launcher
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${GITHUB_WORKSPACE}/standalone -B build/standalone -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake  -GNinja

    - name: Build Standalone GUI Launcher
      # Build your program with the given configuration
      run: cmake --build build/standalone --config ${{env.BUILD_TYPE}} 



